{
	"info": {
		"_postman_id": "61b8f5f3-1eda-4137-807f-3a016598a790",
		"name": "Backend-API-Register-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Backend-Register-new-User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(36).substring(2)\r",
							"var username = \"Username-Test-\" + random;\r",
							"var password = \"Password-Test-\" + random;\r",
							"pm.environment.set(\"username\", username);\r",
							"pm.environment.set(\"password\", password);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Register new User\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.access_token).to.be.not.null;\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"username\"));\r",
							"    pm.expect(jsonData.password).to.eql(pm.environment.get(\"password\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"register"
					]
				},
				"description": "Test Register new User"
			},
			"response": []
		},
		{
			"name": "Backend-Check-Existed-User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(36).substring(2)\r",
							"var password = \"Password-Test-\" + random;\r",
							"pm.environment.set(\"password\", password);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 400\", function () {\r",
							"    pm.response.to.have.status(400 || 201);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Existed-User\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Existed-Username\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Existed-Username\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Backend-Register-Existed-User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status code is 201\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Test Register already existed Username\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.statusCode).to.eql(400);\r",
							"    pm.expect(jsonData.message).to.eql(\"User with name (Existed-Username) is already registered\");\r",
							"    pm.expect(jsonData.error).to.eql(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(36).substring(2)\r",
							"var username = \"Username-Test-\" + random;\r",
							"var password = \"Password-Test-\" + random;\r",
							"pm.environment.set(\"username\", username);\r",
							"pm.environment.set(\"password\", password);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Existed-Username\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Backend-Register-Empty-Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status code is 201\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Test empty Username\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.statusCode).to.eql(400);\r",
							"    pm.expect(jsonData.message).to.eql(\"Username should not be empty!\");\r",
							"    pm.expect(jsonData.error).to.eql(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"TestEmptyUsername\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Backend-Register-Empty-Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status code is 201\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Test empty Password\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.statusCode).to.eql(400);\r",
							"    pm.expect(jsonData.message).to.eql(\"Password should not be empty!\");\r",
							"    pm.expect(jsonData.error).to.eql(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"TestEmptyPassword\",\r\n    \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Backend-Register-Empty-Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test Status code is 201\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Test empty Request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.statusCode).to.eql(400);\r",
							"    pm.expect(jsonData.message).to.eql(\"Username should not be empty!\");\r",
							"    pm.expect(jsonData.error).to.eql(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		}
	]
}